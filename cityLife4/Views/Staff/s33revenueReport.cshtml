@using cityLife4;
@using cityLife.Controllers;
@{
    ViewBag.Title = "s33RevenuReport";
    Layout = "~/Views/sharing/_staffLayout.cshtml";
    TranslateBox tBox = ViewBag.tBox;
    List<int> apartmentNumbers = ViewBag.apartmentNumbers;
    Dictionary<DateTime, RevenuAndOccupancyList> revenuePerMonth = ViewBag.revenuePerMonth;
    string[] backgroundColors = { "aliceblue", "antiquewhite", "gainsboro", "lavender", "lightskyblue", "lemonchiffon" };
    int colorIndex = 0;

}


<style>
    table, th, td {
        font-size: 14px;
    }

    .dash01 {
        /*position: absolute;
        top: 100px;
        left: 0px;*/
        /*height: 300px;*/
        width: 30px;
        border: 1px solid;
    }

    .dash01td {
        padding: 0px;
        border: 0px;
        text-align: center;
        height: 34px;
        width: 50px;
        overflow: hidden;
        white-space: nowrap;
    }

    .dash02 {
        border: 1px solid;
        width: 100%;
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
    }

    .item {
        --white: brown;
    }

    .dash02th {
        padding-top: 2px;
        padding-bottom: 2px;
        text-align: center;
        background-color: #4CAF50;
        color: white;
        border: 1px solid #ddd;
        padding: 2px;
        width: 50px;
        height: 18px;
        overflow: hidden;
        text-align: center
    }

    .dash02td {
        border: 1px solid #ddd;
        padding: 2px;
        width: 50px;
        height: 33px;
        overflow: hidden;
        text-align: center;
        white-space: nowrap;
        line-height: 15px;
    }

    .dash02total {
        font-size: 13px;
        font-weight: bold;
    }

    .wide {
        width: 200px;
        text-align: left;
    }

    .high {
        height: 45px;
        line-height: 15px;
    }

    .leftAlign {
        text-align: left;
    }

    .rightAlign {
        text-align: right;
    }

    .orderRed {
        background-color: crimson;
        color: white;
    }

    .orderOrange {
        background-color: darkorange;
        color: white;
    }

    .orderGreen {
        background-color: aquamarine;
    }

    .orderBlue {
        background-color: lightblue;
        color: black;
    }

    .orderGray {
        background-color: darkgray;
        color: white;
    }

    .today {
        background-color: brown;
    }

    .weekend {
        background-color: orange
    }

    .hidden {
        display: none;
    }

    .highlight {
        background-color: darkslateblue;
        color: white;
    }

    .selectedLeft {
        border-left: 2px solid darkslateBlue;
        border-top: 2px solid darkslateBlue;
        border-bottom: 2px solid darkslateBlue;
    }

    .selectedRight {
        border-right: 2px solid darkslateBlue;
        border-top: 2px solid darkslateBlue;
        border-bottom: 2px solid darkslateBlue;
    }

    .hyperlink {
        color: darkblue;
        text-decoration: underline;
    }

    .selectCell {
        cursor: pointer;
    }
</style>
<div class="main-wrapper reset-indent">

    <div style="display:flex">
        @*first column - apartment numbers, rev, expense*@
        <div class="dash01">
            <table>
                <tr><td class="dash01td">date</td></tr>
                <tr><td class="dash01td">day</td></tr>
                @foreach (int apartmentNumber in apartmentNumbers)
                {
                    if (apartmentNumber > 0)
                    {
                        //this is a real apartment
                        <tr><td class="dash01td">@apartmentNumber</td></tr>
                    }
                    else
                    {
                        //This is a "waiting" apartment
                        <tr><td class="dash01td">Wt</td></tr>
                    }

                }
                <tr><td>rev.</td></tr>
                <tr><td>exp</td></tr>
            </table>
        </div>
        @*the table with all orders*@
        <div class="dash02">
            <table style="table-layout:fixed; width:100%">
                @*line 1 - date line*@
                <tr>
                    @foreach (DateTime aDate in revenuePerMonth.Keys)
                    {
                        <th colspan="2" class="dash02th">@aDate.ToString("MM/yyyy")</th>
                    }
                    <th class="dash02th"></th>  @*total revenue*@
                    <th class="dash02th"></th>  @*average occupancy %*@
                </tr>

                @*line 2 and above - revenue/occupancy lines (1 line for each apartment, 2 columns for each month)*@
                @{
                    int apartmentI = 0;
                    int realApartmentCount = 0;
                    double totalOccupancyPercent = 0d;
                    double totalDaysPerRent = 0d;

                }
                @for (apartmentI = 0; apartmentI < apartmentNumbers.Count(); apartmentI++)
                {
            <tr style="background-color:@backgroundColors[colorIndex]">
                @{
                    colorIndex++;
                    colorIndex %= backgroundColors.Count();  //Advance the color index, and wrap around in case it
                                                             //is larger than the array of available colors
                }
                @foreach (var aMonthRevenue in revenuePerMonth)
                {
                    <td class="dash02td">
                        @aMonthRevenue.Value.revenuePerApartment[apartmentI].toMoneyString()
                    </td>
                    <td class="dash02td">
                        @aMonthRevenue.Value.percentOccupancyPerApartment[apartmentI]%
                    </td>
                }
                <td class="dash02td rightAlign">@revenuePerApartment[apartmentI].toMoneyString()</td>
                <td class="=dash02td rightAlign">@percentOccupancyPerApartment[apartmentI]%</td>
                @{
                    if (anApartment.First().apartmentNumber > 0)
                    {
                        //This is a real apartment - calculate the percentage average and the average rent days
                        totalOccupancyPercent += percentOccupancyPerApartment[apartmentI];
                        totalDaysPerRent += aveargeDaysPerApartment[apartmentI];
                        realApartmentCount++;
                    }
                    apartmentI++;

                }
            </tr>
                }
                @*Revenu total line*@
                <tr>
                    @{ var totalRevenue = new Money(0m, "UAH");}
                    @foreach (var aRevenue in revenuePerDay)
                    {
                        if (aRevenue.isZero())
                        {
                            <td class="dash02td"></td>
                        }
                        else
                        {
                            <td class="dash02td">@aRevenue.toMoneyString(showCents: false)</td>
                            totalRevenue += aRevenue;


                        }
                    }
                    @{
                        int averageOccupancyPercent = (int)Math.Round(totalOccupancyPercent / realApartmentCount);
                        double averageDaysPerRent = totalDaysPerRent / realApartmentCount;
                    }
                    <td class="dash02td dash02total rightAlign">@totalRevenue.toMoneyString()</td>
                    <td class="dash02td dash02total rightAlign">@averageOccupancyPercent%</td>
                    <td class="dash02td dash02total rightAlign">@string.Format("{0:F1}", averageDaysPerRent)</td>
                </tr>

                @*Expense total line*@
                @{
                    DateTime theDate = fromDate;
                }
                <tr>
                    @{ var totalExpense = new Money(0m, "UAH");}
                    @foreach (var anExpense in expensePerDay)
                    {
                        if (anExpense.isZero())
                        {
                            <td class="dash02td selectCell" data-date='@theDate.ToString("yyyy-MM-dd")' onclick="expenseClicked(this,false)"></td>
                        }
                        else
                        {
                            <td class="dash02td selectCell" data-date='@theDate.ToString("yyyy-MM-dd")' onclick="expenseClicked(this,true)">
                                @anExpense.toMoneyString(showCents: false)
                            </td>
                            totalExpense += anExpense;
                        }
                        theDate = theDate.AddDays(1);
                    }
                    <td class="dash02td dash02total rightAlign">@totalExpense.toMoneyString()</td>
                    <td class="dash02td rightAlign"></td>
                    <td class="dash02td rightAlign"></td>
                </tr>

                @*Maid on duty line*@
                @{
                    theDate = fromDate;
                }
                <tr>
                    @foreach (var anEmpWorkDay in empWorkDaysArray)
                    {
                        if (anEmpWorkDay == null)
                        {
                            <td class="dash02td selectCell" onclick="displayMaidList(this)" data-emp-id="0"
                                data-date='@theDate.ToString("yyyy-MM-dd")'></td>
                            @*date-emp-id=0 denotes that an employee is not assigned to that day
                                date-date gives the date of the current cell*@
                        }
                        else
                        {
                            string greenCss = "";
                            if (anEmpWorkDay.isSalaryDay)
                            {
                                greenCss = "orderGreen";
                            }
                            <td class="dash02td @greenCss selectCell" onclick="displayMaidList(this)"
                                data-emp-id="@anEmpWorkDay.Employee.Id"
                                data-date='@theDate.ToString("yyyy-MM-dd")'>
                                @anEmpWorkDay.Employee.name
                            </td>
                        }
                        theDate = theDate.AddDays(1);
                    }
                    <td class="dash02td dash02total rightAlign">@((totalRevenue - totalExpense).toMoneyString())</td>
                    <td class="dash02td rightAlign"></td>
                    <td class="dash02td rightAlign"></td>

                </tr>

            </table>
        </div>
    </div>
    <div style="padding:2px;">@tBox.translate("Total revenue"):@totalRevenue.toMoneyString(showCents: false)</div>

    <!--This part contgains all forms which are displayed under the main grid. Contains 6 forms, where each time only
        one is displayed and the rest are hidden-->
    <div id="s20underTheGrid">
        <!--div for the order details info (when the user clicks on an existing order)-->
        <div style="padding:4px;max-width:400px;" id="s22OrderDetails">


        </div>
        <!--div for info about new order dates (when the user clicks on an empty cell)-->
        <div id="newOrderDates" class="hidden">
            <span style="float:left">@tBox.translate("Apartment Number")</span>
            <span id="apartmentNumber" style="float:right"></span>
            <br />
            <span style="float:left">@tBox.translate("Checkin Date")</span>
            <span id="checkinDate" style="float:right"></span>
            <br />
            <span style="float:left">@tBox.translate("Checkout Date")</span>
            <span id="checkoutDate" style="float:right"></span>
            <br />
            <a id="addOrderButton" class="btn" href="/staff/s23updateOrder">@tBox.translate("New Order")</a>

        </div>
        <!--div for the maid list (when the user clicks on a maid line)-->
        <div id="maidList" class="hidden">
            @foreach (var aMaid in maidList)
            {
                <input type="radio" name="maid" value="@aMaid.Id" data-maid-name="@aMaid.name" onclick="setMaid(this)" />@aMaid.name
            }
            <input type="radio" name="maid" value="0" data-maid-name="" onclick="setMaid(this)" />none
        </div>


        <!--div for the "add expense" form (when clicking on an empty expense cell)-->
        <div id="addExpense" style="max-width:500px;" class="hidden">
            <form id="addExpenseForm" method="post">
                <div class='field-box datepicker-box'>
                    <input type="text" id="expenseDate" name="expenseDate">
                    <label for="expenseDate">
                        <span class="field-name">@tBox.translate("Expense date")</span>
                        <span class="calendar-ico"></span>
                    </label>
                    <span class="field-error"></span>
                </div>
                <div class='inputBox select-box'>
                    <input list="expenseTypeList" name="expenseType" id="expenseType" class="inputElement" />
                    <datalist id="expenseTypeList">
                        @foreach (var expenseType in expenseTypes)
                        {
                            <option value="@expenseType">@tBox.translate(expenseType)</option>
                        }
                    </datalist>
                    <label for="expenseType" class="label">@tBox.translate("Expense Type")</label>
                    <span class="error-text"></span>
                </div>
                <div class="form-box-wrap">
                    @Html.inputField("amount", "", "", tBox, style: "width:48%", fieldType: "number")
                    <div class="field-box select-box">
                        <select id="currency" name="currency">
                            <option value="UAH" selected>UAH</option>
                            <option value="USD">USD</option>
                            <option value="EUR">EUR</option>
                        </select>
                        <label>
                            <span class="field-name">@tBox.translate("Currency")</span>
                        </label>
                    </div>
                </div>

                <div class="form-box-wrap">
                    @Html.inputField("description", "", "", tBox)

                </div>
                <input type="button" class="btn small-button" value='@tBox.translate("Add")' onclick="sendExpense(this)" />
                <a class="btn" style=" min-width: 90px;height: auto;margin: 5px;" href="/staff/s21Dashboard">@tBox.translate("Cancel")</a>
                <span id="expenseAddedMessage" style="display:none; background-color:darkblue; color:white">Expense Added</span>
            </form>
        </div>


        <!--div for the table showing all expenses for that date (when clicking on a non-empty expense cell)-->
        <div id="s30showExpenses">

        </div>

        <!--div for the update expense form-->
        <div id="s31updateExpense" style="max-width:550px;">

        </div>
    </div>
</div>

<script>
    $(document).ready(initialize);

    function initialize() {
        //Initialize date picker
        $("#fromDate")
            .datepicker({
                defaultDate: "+0d",
                numberOfMonths: 1,
                dateFormat: "d MM, yy",
                firstDay: 1
            });
        $("#expenseDate")
            .datepicker({
                defaultDate: "+0d",
                numberOfMonths: 1,
                dateFormat: "dd/mm/yy",
                firstDay: 1
            });
        //highlight the default order (if it should be highlighted)
        var orderId = document.getElementById("highlightOrderId").dataset.orderId;
        if (orderId != 0) {
            var td = document.getElementById(orderId);
            showOrder(td);  //We do the same as if a user would click on an occupied cell.
        }

        //Initialize the currency dropdown in expense form

    }

    var lastSelectedTd = null;
    var lastSelectedLeft = null;
    var lastSelectedRight = null;
    var apartmentNumber = "0";
    var checkinDate = new Date();
    var checkoutDate = new Date();
    var nights = 0;
    var cellClickCounter = 0;


    //The function hides all forms under the grid except the one given in the parameter
    function hideAllExcept(div) {
        $("#s20underTheGrid").children().addClass("hidden");
        $(div).removeClass("hidden");
    }
    function showOrder(td) {
        // var orderId = td.dataset.orderId;
        if (lastSelectedTd != null) {
            $(lastSelectedTd).removeClass("highlight");
        }
        $(td).addClass("highlight");
        lastSelectedTd = td;
        var orderIdJson = { orderId: td.dataset.orderId };
        $.get("/staff/s22OrderDetails", orderIdJson).done(displayOrderDetails);
    }

    function displayOrderDetails(orderDetailsHTML) {
        hideAllExcept("#s22OrderDetails");
        $("#s22OrderDetails").html(orderDetailsHTML);
    }



    function addOrder(td) {
        cellClickCounter++;
        if (lastSelectedTd != null) {
            //remove highlighting from a previous booking that was selected
            $(lastSelectedTd).removeClass("highlight");
            lastSelectedTd = null;
        }
        if (cellClickCounter % 2 == 1) {
            //The user clicked odd number of times on a free cell - it means we need to collect apartment number and checkin date
            //We assume a one night stay
            if (lastSelectedLeft != null) {
                $(lastSelectedLeft).removeClass("selectedLeft");
            }
            if (lastSelectedRight != null) {
                $(lastSelectedRight).removeClass("selectedRight");
            }
            $(td).addClass("selectedLeft");
            lastSelectedLeft = td;
            apartmentNumber = td.dataset.apartmentId;
            checkinDate = new Date(td.dataset.date);
            nights = 1;
            var checkoutDate = nextDate(checkinDate);
            displayCheckinOutDates(apartmentNumber, checkinDate, checkoutDate, nights);
        }
        else {
            //The user clicked even number of times on a cell = collect the checkout date. Note that the user presses the
            //last date - not the checkout date (which is one day later.)
            var secondApartmentNumber = td.dataset.apartmentId;
            if (apartmentNumber != secondApartmentNumber) {
                //The second click was for a different apartment number - start the process again.
                //perform this by a recursive call to addOrder
                addOrder(td);
                return;
            }
            $(td).addClass("selectedRight");
            lastSelectedRight = td;
            lastDate = new Date(td.dataset.date);
            checkoutDate = nextDate(lastDate);
            nights = diffDays(checkinDate, checkoutDate);
            if (nights <= 0) {
                //The second click was for a day before the first click - reverse the checkin and checkout dates
                //We do it by a recursive call to "addOrder"
                var leftTD = lastSelectedRight;
                var rightTD = lastSelectedLeft;
                addOrder(leftTD);
                addOrder(rightTD);
                return;
            }

            displayCheckinOutDates(apartmentNumber, checkinDate, checkoutDate, nights);
        }
    }
    //convert a Date object to dd/mm/yyyy
    function formatDateddmmyyyy(aDate) {
        var day = aDate.getDate();
        var zeroDay = day <= 9 ? "0" : "";
        var month = aDate.getMonth() + 1;
        var zeroMonth = month <= 9 ? "0" : "";
        var ddmmyyyy = zeroDay + day + "/" + zeroMonth + month + "/" + aDate.getFullYear();   //create the string dd/mm/yyyy. Note that dd and mm will always have 2 digits
        return ddmmyyyy;
    }
    //convert a Date object to yyyy-mm-dd
    function formatDateyyyymmdd(aDate) {
        var day = aDate.getDate();
        var zeroDay = day <= 9 ? "0" : "";
        var month = aDate.getMonth() + 1;
        var zeroMonth = month <= 9 ? "0" : "";
        var yyyymmdd = aDate.getFullYear() + "-" + zeroMonth + month + "-" + zeroDay + day;
        return yyyymmdd;
    }
    //returns a date which is 1 day later
    function nextDate(aDate) {
        var nextDate = new Date(aDate);
        var nextDay = aDate.getDate() + 1;
        nextDate.setDate(nextDay);
        return nextDate;
    }

    function displayCheckinOutDates(apartmentNumber, checkinDate, checkoutDate, nights) {
        var html = '<div>' +
                '<span style="float:left">@tBox.translate("Apartment Number")</span>' +
                '<span id="apartmentNumber" style="float:right">' + apartmentNumber + '</span>' +
                '<br />' +
                '<span style="float:left">@tBox.translate("Checkin Date")</span>' +
                '<span id="checkinDate" style="float:right">' + formatDateddmmyyyy(checkinDate) + '</span>' +
                '<br />' +
                '<span style="float:left">@tBox.translate("Checkout Date")</span>' +
                '<span id="checkinDate" style="float:right">' + formatDateddmmyyyy(checkoutDate) + '</span>' +
                '<br />' +
                '<span style="float:left">@tBox.translate("nights")</span>' +
                '<span id="checkinDate" style="float:right">' + nights + '</span>' +
            '<br />' +
            '<a class="btn" href="/staff/s24addOrder?checkin=' + formatDateyyyymmdd(checkinDate) +
            '&checkout=' + formatDateyyyymmdd(checkoutDate) +
            '&nights=' + nights +
            '&apartmentNumber=' + apartmentNumber + '">@tBox.translate("Add Order") </a>' +
                '</div>';

        hideAllExcept("#s22OrderDetails");
        $("#s22OrderDetails").html(html);
    }

    //returns the difference between d1 and d2 (actually d2 minus d1)
    function diffDays(d1, d2) {
        var ndays;
        var tv1 = d1.getTime();  // msec since 1970
        var tv2 = d2.getTime();

        ndays = (tv2 - tv1) / 1000 / 86400;
        ndays = Math.round(ndays - 0.5);
        return ndays;
    }

    var tdMaid=null;  //contains: data-emp-id= emp_id and data-date = the date of that cell. If no
    function displayMaidList(tdEmp) {

        $(tdMaid).removeClass("highlight");   //If tdMaid is null - the command is ignored.
        $(tdExp) .removeClass("highlight");

        $(tdEmp).addClass("highlight");
        tdMaid = tdEmp;  //Keep the cell that was pressed by the user. When the user selects a new maid from the list of radio buttons - we will
        //know to which cell it was related
        hideAllExcept("#maidList");
    }

    //the user pressed a radio button of a maid - this maid should be assigned to the date previously selected by the user
    //(and kept in "tdMaid")
    function setMaid(maidRadio) {
        $(tdMaid).text(maidRadio.dataset.maidName);
        var maidDay = new Object();
        maidDay.maidId = maidRadio.value;
        maidDay.date = tdMaid.dataset.date;
        $.post("/staff/s28AddUpdateMaid", maidDay);
    }

    //The function is called when an expense cell is clicked.
    //param 1: the cell clicked
    //param 2: whether the expense cell contained an expense or not.
    var tdExp = null;
    function expenseClicked(tdExpense, expenseIsPositive) {
        var expenseDate = tdExpense.dataset.date;  //the date format is yyyy-mm-dd
        var theDate = new Date(expenseDate);
        var ddmmyyyy = formatDateddmmyyyy(theDate);
        $("#expenseDate").val(ddmmyyyy);
        tdExpense.text

        //Clean all other pieces of information which may exist under the grid
        $(tdMaid).removeClass("highlight");   //If tdMaid or tdExpense is null - the command is ignored.
        $(tdExp).removeClass("highlight");  //remove highlight from the previous expense cell
        $(tdExpense).addClass("highlight");
        tdExp = tdExpense;  //Keep the cell that was pressed by the user. When the user selects a new expense from the list of radio buttons - we will
        //know to which cell it was related
        if (tdExpense.innerText != "") {
            //the cell contains expenses - show a table with a list of expenses for that day
            var expenseDateParam = new Object();
            expenseDateParam.expenseDateSt = expenseDate;
            $.get("/staff/s30showExpensesForDate", expenseDateParam, showExpenseList);

        }
        else {
            //There are no expenses for that day - show the "add class" form
            hideAllExcept("#addExpense");
        }
    }

    function showExpenseList(expenseListHTML) {
        hideAllExcept("#s30showExpenses");
        $("#s30showExpenses").html(expenseListHTML);
    }
    //perform ajax call to send the expense form to the backend - staff controller s29addExpense
    function sendExpense() {
        var formParams = $("#addExpenseForm").serialize();
        $.post("/staff/s29addExpense", formParams,expenseAdded);
    }

    //get response from staff controller s29addExpense. The callback returns the total amount of expenses for that day after adding the new expense.
    function expenseAdded(totalExpenseForDay) {
        $(tdExp).text(totalExpenseForDay);
        $("#expenseType").val("");
        $("#amount").val("");
        $("#description").val("");
        $("#expenseAddedMessage").fadeIn(1000, () => $("#expenseAddedMessage").fadeOut(1000));

    }
    //the function is called by on click in s30showExpenses
    function addExpense() {
        hideAllExcept("#addExpense");
    }

    //The function is called by on click in s30showExpenses (for each expense line)
    function updateExpense(expenseId) {
        var expense = new Object();
        expense.expenseId = expenseId;
        $.get("/staff/s31updateExpense", expense, showUpdateForm);
    }
    function showUpdateForm(updateForm) {
        hideAllExcept("#s31updateExpense");
        $("#s31updateExpense").html(updateForm);
        $("#currency2").select2({
            minimumResultsForSearch: Infinity
        });
        var expenseDate = $("#expenseDate2");
        expenseDate.datepicker({
           // defaultDate: "5 Feb 2019",
            numberOfMonths: 1,
            dateFormat: "dd/mm/yy",
            firstDay: 1
        });
    }

    function expenseUpdating(btn) {
        var formParams = $("#updateExpenseForm").serialize();
        $.post("/staff/s31updateExpense", formParams, expenseUpdated);

    }

    function expenseUpdated(totalExpenseForDay) {
        $(tdExp).text(totalExpenseForDay);
        $("#expenseUpdatedMessage").fadeIn(1000, () => $("#expenseUpdatedMessage").fadeOut(1000, () => $("#s31updateExpense").empty()));
    }

    function expenseDeleting(btn) {
        var expenseId = $("#expenseId").val();
        var formParams = new Object();
        formParams.expenseId = expenseId;
        $.post("/staff/s32deleteExpense", formParams, expenseDeleted);
    }

    function expenseDeleted(totalExpenseForDay) {
        $(tdExp).text(totalExpenseForDay);
        $("#expenseDeletedMessage").fadeIn(1000, () => $("#expenseDeletedMessage").fadeOut(1000, () => $("#s31updateExpense").empty()));
    }
</script>
