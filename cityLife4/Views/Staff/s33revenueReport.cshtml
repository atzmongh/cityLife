@using cityLife4;
@using cityLife.Controllers;
@{
    ViewBag.Title = "s33RevenuReport";
    Layout = "~/Views/sharing/_staffLayout.cshtml";
    Dictionary2d<int, int, RevenueAndOccupancy> revenueMatrix = ViewBag.revenueMatrix;
    Dictionary<int, Money> expensesPerMonth = ViewBag.expensesPerMonth;
    List<int> apartmentNumbers = ViewBag.apartmentList;
    TranslateBox tBox = ViewBag.tBox;
    Employee theEmployee = ViewBag.employee;
    string[] backgroundColors = { "aliceblue", "antiquewhite", "gainsboro", "lavender", "lightskyblue", "lemonchiffon" };
    int colorIndex = 0;
    DateTime fromDate = ViewBag.fromDate;
    DateTime toDate = ViewBag.toDate;
    //int fromMonth = ViewBag.fromMonth;
    //int fromYear = ViewBag.fromYear;
    //int toMonth = ViewBag.toMonth;
    //int toYear = ViewBag.toYear;
}


<style>
    table, th, td {
        font-size: 14px;
    }

    .dash01 {
        /*position: absolute;
        top: 100px;
        left: 0px;*/
        /*height: 300px;*/
        width: 30px;
        border: 1px solid;
    }

    .dash01td {
        padding: 0px;
        border: 0px;
        text-align: center;
        height: 34px;
        width: 50px;
        overflow: hidden;
        white-space: nowrap;
    }

    .dash02 {
        border: 1px solid;
        width: 100%;
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
    }

    .item {
        --white: brown;
    }

    .dash02th {
        padding-top: 2px;
        padding-bottom: 2px;
        text-align: center;
        background-color: #4CAF50;
        color: white;
        border: 1px solid #ddd;
        padding: 2px;
        width: 50px;
        height: 18px;
        overflow: hidden;
        text-align: center
    }

    .dash02td {
        border: 1px solid #ddd;
        padding: 2px;
        width: 50px;
        height: 33px;
        overflow: hidden;
        text-align: center;
        white-space: nowrap;
        line-height: 15px;
    }

    .dash02total {
        font-size: 13px;
        font-weight: bold;
        text-align: center;
    }

    .wide {
        width: 200px;
        text-align: left;
    }

    .high {
        height: 45px;
        line-height: 15px;
    }

    .leftAlign {
        text-align: left;
    }

    .rightAlign {
        text-align: right;
    }

    .orderRed {
        background-color: crimson;
        color: white;
    }

    .orderOrange {
        background-color: darkorange;
        color: white;
    }

    .orderGreen {
        background-color: aquamarine;
    }

    .orderBlue {
        background-color: lightblue;
        color: black;
    }

    .orderGray {
        background-color: darkgray;
        color: white;
    }

    .today {
        background-color: brown;
    }

    .weekend {
        background-color: orange
    }

    .hidden {
        display: none;
    }

    .highlight {
        background-color: darkslateblue;
        color: white;
    }

    .selectedLeft {
        border-left: 2px solid darkslateBlue;
        border-top: 2px solid darkslateBlue;
        border-bottom: 2px solid darkslateBlue;
    }

    .selectedRight {
        border-right: 2px solid darkslateBlue;
        border-top: 2px solid darkslateBlue;
        border-bottom: 2px solid darkslateBlue;
    }

    .hyperlink {
        color: darkblue;
        text-decoration: underline;
    }

    .selectCell {
        cursor: pointer;
    }
</style>
<div class="main-wrapper reset-indent">
    <form id="monthRangeForm" method="get" action="s33RevenueReport">
        <div class="page-heading">

            @tBox.translate("Revenue Report")
            <div class="form-box-wrap" style="width:920px;">
                <div class="field-box select-box" style="padding-right:10px;">
                    <select name="fromMonth">
                        @for (int month = 1; month <= 12; month++)
                        {
                            if (month == fromDate.Month)
                            {
                                <option selected>@month</option>
                            }
                            else
                            {
                                <option>@month</option>
                            }
                        }
                    </select>
                    <label>
                        <span class="field-name">@tBox.translate("from month")</span>
                    </label>
                </div>
                <div class="field-box select-box" style="padding-right:10px;">
                    <select name="fromYear">
                        @for (int theYear = 2019; theYear <= 2021; theYear++)
                        {
                            if (theYear == fromDate.Year)
                            {
                                <option selected>@theYear</option>
                            }
                            else
                            {
                                <option>@theYear</option>
                            }
                        }
                    </select>
                    <label>
                        <span class="field-name">@tBox.translate("from year")</span>
                    </label>
                </div>
                <div class="field-box select-box" style="padding-right:10px;">
                    <select name="toMonth">
                        @for (int month = 1; month <= 12; month++)
                        {
                            if (month == toDate.Month - 1)   //because the "toDate" contains the first 
                                                             // moment of the next month
                            {
                                <option selected>@month</option>
                            }
                            else
                            {
                                <option>@month</option>
                            }
                        }
                    </select>
                    <label>
                        <span class="field-name">@tBox.translate("to month")</span>
                    </label>
                </div>
                <div class="field-box select-box" style="padding-right:10px;">
                    <select name="toYear">
                        @for (int theYear = 2019; theYear <= 2021; theYear++)
                        {
                            if (theYear == toDate.Year)
                            {
                                <option selected>@theYear</option>
                            }
                            else
                            {
                                <option>@theYear</option>
                            }
                        }
                    </select>
                    <label>
                        <span class="field-name">@tBox.translate("to year")</span>
                    </label>
                </div>
                <button id="filterRevenue" class="btn" type="submit">@tBox.translate("OK")</button>
            </div>
        </div>
    </form>
    <div style="display:flex">
        @*first column - apartment numbers, rev, expense*@
        <div class="dash01">
            <table>
                <tr><td class="dash01td">date</td></tr>
                <tr><td class="dash01td"></td></tr>
                @foreach (int apartmentNumber in apartmentNumbers)
                {
                    if (apartmentNumber > 0)
                    {
                        //this is a real apartment
                        <tr><td class="dash01td">@apartmentNumber</td></tr>
                    }
                    else
                    {
                        //This is a "waiting" apartment
                        <tr><td class="dash01td">Wt</td></tr>
                    }

                }
                <tr><td>rev.</td></tr>
                <tr><td>exp</td></tr>
                <tr><td>net</td></tr>
            </table>
        </div>
        @*the table with all orders*@
        <div class="dash02">
            <table style="table-layout:fixed; width:100%">
                @*line 1 - date line*@
                <tr>
                    @for (DateTime aDate = fromDate; aDate < toDate; aDate = aDate.AddMonths(1))
                    {
                        <th colspan="2" class="dash02th">@string.Format("{0:MM/yyyy}",aDate)</th>
                    }
                    <th colspan="2" class="dash02th">Total</th>
                </tr>

                @*line 2 - revenue and occupancy titles*@
                <tr>
                    @for (DateTime aDate = fromDate; aDate <= toDate; aDate = aDate.AddMonths(1))
                    {
                        <th class="dash02th">rev</th>
                        <th class="dash02th">occ%</th>
                    }
                </tr>
                @*line 3 and above - revenue/occupancy lines (1 line for each apartment, 2 columns for each month)*@

                @for (int apartmentI = 0; apartmentI < apartmentNumbers.Count(); apartmentI++)
                {
                    <tr style="background-color:@backgroundColors[colorIndex]">
                        @{
                            colorIndex++;
                            colorIndex %= backgroundColors.Count();  //Advance the color index, and wrap around in case it
                                                                     //is larger than the array of available colors
                            var apartmentRevenue = revenueMatrix.getByRowsKey(apartmentNumbers[apartmentI]);
                        }
                        @*display the 12 revenue and occupancy columns*@
                        @foreach (var aMonthRevenue in apartmentRevenue)
                        {
                            <td class="dash02td">
                                @aMonthRevenue.Value.revenue.toMoneyString()
                            </td>
                            int percentOccupancy =
                                (int)(aMonthRevenue.Value.percentOccupancy() * 100);
                            <td class="dash02td">
                                @percentOccupancy%
                            </td>
                        }
                        @*display total revenue and average occupancy*@
                    <td class="dash02total">
                        @if (apartmentRevenue.Count() > 0)
                        {
                            @apartmentRevenue.Sum(rev => rev.Value.revenue).toMoneyString()
                        }

                    </td>
                        <td class="dash02total">
                            @apartmentRevenue.Average(rev => rev.Value.percentOccupancy() * 100)%
                        </td>
                    </tr>
                }
                @*Revenu total line*@
                <tr>
                    @{
                        Money grandTotalRevenue = new Money(0, "UAH");
                        double averageOccupancy = 0d;
                        Dictionary<int, Money> revenuePerMonth = new Dictionary<int, Money>();
                    }
                    @for (int month = 1; month <= 12; month++)
                    {
                        var revenueForMonth = revenueMatrix.getByColumnsKey(month);
                        Money totalRevenueForMonth = new Money(0,"UAH");
                        if (revenueForMonth.Count > 0)
                        {
                            totalRevenueForMonth = revenueForMonth.Sum(rev => rev.Value.revenue);
                        }

                        grandTotalRevenue += totalRevenueForMonth;
                        revenuePerMonth.Add(month, totalRevenueForMonth);
                        <td class="dash02total">@totalRevenueForMonth.toMoneyString()</td>

                        double percentOccupancy = 0;
                        if (revenueForMonth.Count() > 0)
                        {
                            percentOccupancy = revenueForMonth.Average(rev => rev.Value.percentOccupancy()) * 100;
                        }

                        averageOccupancy += percentOccupancy;

                        <td class="dash02total">@Math.Round(percentOccupancy)%</td>
                    }
                    @{
                        averageOccupancy = averageOccupancy / 12;
                    }
                    <td class="dash02total">@grandTotalRevenue.toMoneyString()</td>
                    <td class="dash02total">@averageOccupancy%</td>
                </tr>
                @*expenses line*@
                <tr>
                    @for (int month = 1; month <= 12; month++)
                    {
                        if (expensesPerMonth.ContainsKey(month))
                        {
                            <td class="dash02total">@expensesPerMonth[month].toMoneyString()</td>
                        }
                        else
                        {
                            <td class="dash02total">0</td>
                        }
                        <td class="dash02total"></td>
                    }
                    @*display expenses grand total*@
                    @{
                        Money grandTotalExpenses = expensesPerMonth.Sum(rec => rec.Value);
                    }
                    <td class="dash02total">@grandTotalExpenses.toMoneyString()</td>
                </tr>
                @*net revenue - total revenue minus expenses*@
                <tr>
                    @for (int month = 1; month <= 12; month++)
                    {
                        Money expensesForMonth = new Money(0, "UAH");
                        Money revenueForMonth = new Money(0, "UAH");
                        if (expensesPerMonth.ContainsKey(month))
                        {
                            expensesForMonth = expensesPerMonth[month];
                        }
                        if (revenuePerMonth.ContainsKey(month))
                        {
                            revenueForMonth = revenuePerMonth[month];
                        }
                        Money netRevenue = revenueForMonth - expensesForMonth;
                        <td class="dash02total">@netRevenue.toMoneyString()</td>
                        <td></td>
                    }
                    @{
                        Money grandNetRevenue = grandTotalRevenue - grandTotalExpenses;
                    }
                    <td class="dash02total">@grandNetRevenue.toMoneyString()</td>
                    <td></td>
                </tr>
            </table>
        </div>
    </div>
</div>

