@using cityLife4;
@using cityLife.Controllers;
@{
    ViewBag.Title = "s21horizontalDahsboard";
    Layout = "~/Views/sharing/_staffLayout.cshtml";
    TranslateBox tBox = ViewBag.tBox;
    DateTime fromDate = ViewBag.fromDate;
    string fromDateSt = fromDate.ToString("dd/MM/yyyy");
    DateTime today = ViewBag.today;
    List<List<DayBlock>> apartmentDayBlocks = ViewBag.apartmentDayBlocks;
    List<Money> revenuePerDay = ViewBag.revenuePerDay;
    EmployeeWorkDay[] empWorkDaysArray = ViewBag.empWorkDaysArray;
    int highlightOrderId = ViewBag.highlightOrderId;
}

<style>
    table, th, td {
        font-size: 14px;
    }

    .dash01 {
        /*position: absolute;
        top: 100px;
        left: 0px;*/
        /*height: 300px;*/
        width: 30px;
        border: 1px solid;
    }

    .dash01td {
        padding: 0px;
        border: 0px;
        text-align: center;
        height: 34px;
        width: 50px;
        overflow: hidden;
        white-space: nowrap;
    }

    .dash02 {
        border: 1px solid;
        width: 100%;
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
    }

    .item {
        --white: brown;
    }

    .dash02th {
        padding-top: 2px;
        padding-bottom: 2px;
        text-align: center;
        background-color: #4CAF50;
        color: white;
        border: 1px solid #ddd;
        padding: 2px;
        width: 50px;
        height: 33px;
        overflow: hidden;
        text-align: center
    }

    .dash02td {
        border: 1px solid #ddd;
        padding: 2px;
        width: 50px;
        height: 33px;
        overflow: hidden;
        text-align: center;
        white-space: nowrap;
        line-height: 15px;
    }

    .orderRed {
        background-color: crimson;
        color: white;
    }

    .orderOrange {
        background-color: darkorange;
        color:white;
    }

    .orderGreen {
        background-color: aquamarine;
    }

    .orderBlue{
        background-color:lightblue;
        color:black;
    }
    .orderGray {
        background-color: darkgray;
        color: white;
    }

    .today {
        background-color: brown;
    }
    .weekend {
        background-color: orange
    }

    .hidden {
        display: none;
    }
    .highlight{
        background-color:darkslateblue;
        color:white;
    }
    .selectedLeft {
        border-left: 2px solid darkslateBlue;
        border-top: 2px solid darkslateBlue;
        border-bottom: 2px solid darkslateBlue;
    }
    .selectedRight {
        border-right: 2px solid darkslateBlue;
        border-top: 2px solid darkslateBlue;
        border-bottom: 2px solid darkslateBlue;
    }
    .hyperlink{
        color:darkblue;
        text-decoration:underline;
    }
</style>
<div class="main-wrapper reset-indent">
    <form id="fromDateForm" method="get" action="s21Dashboard">
        <div class="page-heading">
            @tBox.translate("Dashboard")
            <span>(@fromDateSt)</span>
            <label for="datepickerBtn" class="datepicker-btn">
                <input type="text" readonly="readonly" id="datepickerBtn" name="fromDate" class="call-datepicker" 
                       onchange="$('#fromDateForm').submit()">
            </label>
        </div>
    </form>


    
    <span id="highlightOrderId" data-order-id="@highlightOrderId"></span>  <!--keep the order which needs to be highlighted (or 0 if none -->
    <div style="display:flex">
        <div class="dash01">
            <table>
                <tr><td class="dash01td">date</td></tr>
                <tr><td class="dash01td">day</td></tr>
                @foreach (var anApartment in apartmentDayBlocks)
                {
                    int apartmentNumber = anApartment.First().apartmentNumber;
                    <tr><td class="dash01td">@apartmentNumber</td></tr>
                }
                <tr><td>rev.</td></tr>
            </table>
        </div>
        <div class="dash02">
            <table style="table-layout:fixed; width:100%">

                <tr>
                    @{ var lastDate = fromDate.AddDays(31);}
                    @for (DateTime aDate = fromDate; aDate < lastDate; aDate = aDate.AddDays(1))
                    {
                        string todaysBackground = (aDate.Date == today.Date ? "today" : "");  //Check if the date is today - put a different color
                        string weekendBackground = "";
                        if (aDate.Date.DayOfWeek == DayOfWeek.Sunday || aDate.Date.DayOfWeek == DayOfWeek.Saturday)
                        {
                            //This is a weekend - highlight the column header in orange
                            weekendBackground = "weekend";
                        }
                        DayOfWeek d;

                        <th class="dash02th @weekendBackground @todaysBackground">@aDate.ToString("dd/MM")</th>
                    }
                </tr>
                <tr>
                    @for (DateTime aDate = fromDate; aDate < lastDate; aDate = aDate.AddDays(1))
                    {
                        string todaysBackground = (aDate.Date == today.Date ? "today" : "");  //Check if the date is today - put a different color
                        <th class="dash02th @todaysBackground">@aDate.ToString("ddd")</th>
                    }
                </tr>


                @foreach (var anApartment in apartmentDayBlocks)
                {
                    <tr>
                        @foreach (var aDAyBlock in anApartment)
                        {
                            if (aDAyBlock.orderStatus == null)
                            {
                                //This is a free day
                                <td class="dash02td" data-apartment-id="@anApartment.First().apartmentNumber"
                                    data-date="@aDAyBlock.firstDate" onclick="addOrder(this)"></td>
                            }
                            else
                            {
                                //This is a busy day (or days)
                                string color = aDAyBlock.orderColor.ToString();
                                string cssColor = "order" + color;   //e.g. orderRed, orderGreen - we prepared such CSS classes
                                <td class="dash02td @cssColor" colspan="@aDAyBlock.days" data-order-id="@aDAyBlock.orderId" id="@aDAyBlock.orderId" 
                                    onclick="showOrder(this)">@aDAyBlock.name <br /> @aDAyBlock.price.toMoneyString(showCents:false)</td>
                            }
                        }
                    </tr>
                }
                @*Revenu total line*@
                <tr>
                    @{ var totalRevenue = new Money(0m, "UAH");}
                    @foreach(var aRevenue in revenuePerDay)
                    {
                        if (aRevenue.isZero())
                        {
                            <td class="dash02td"></td>
                        }
                        else
                        {
                            <td class="dash02td">@aRevenue.toMoneyString(showCents: false)</td>
                            totalRevenue += aRevenue;
                            

                        }
                    }
                </tr>

                @*Maid on duty line*@
                <tr>
                    @foreach (var anEmpWorkDay in empWorkDaysArray)
                    {
                        if (anEmpWorkDay == null)
                        {
                            <td class="dash02td"></td>
                        }
                        else
                        {
                            string greenCss = "";
                            if (anEmpWorkDay.isSalaryDay)
                            {
                                greenCss = "orderGreen";
                            }
                            <td class="dash02td @greenCss">@anEmpWorkDay.Employee.name</td>
                        }
                    }
                </tr>

            </table>
        </div>
    </div>
    <div style="padding:2px;">@tBox.translate("Total revenue"):@totalRevenue.toMoneyString(showCents:false)</div>
    <div style="padding:4px;max-width:400px;" id="s22OrderDetails">


    </div>
    <div id="newOrderDates" class="hidden">
        <span style="float:left">@tBox.translate("Apartment Number")</span>
        <span id="apartmentNumber" style="float:right"></span>
        <br />
        <span style="float:left">@tBox.translate("Checkin Date")</span>
        <span id="checkinDate" style="float:right"></span>
        <br />
        <span style="float:left">@tBox.translate("Checkout Date")</span>
        <span id="checkoutDate" style="float:right"></span>
        <br />
        <a id="addOrderButton" class="btn" href="/staff/s23updateOrder">@tBox.translate("New Order")</a>

    </div>
</div>

<script>
    $(document).ready(initialize);

    function initialize() {
        //Initialize date picker
        $("#fromDate")
            .datepicker({
                defaultDate: "+0d",
                numberOfMonths: 1,
                dateFormat: "d MM, yy",
                firstDay: 1
            });
        //highlight the default order (if it should be highlighted)
        var orderId = document.getElementById("highlightOrderId").dataset.orderId;
        if (orderId != 0) {
            var td = document.getElementById(orderId);
            showOrder(td);  //We do the same as if a user would click on an occupied cell.
        }

    }

    var lastSelectedTd = null;
    var lastSelectedLeft = null;
    var lastSelectedRight = null;
    var apartmentNumber = "0";
    var checkinDate = new Date();
    var checkoutDate = new Date();
    var nights = 0;
    var cellClickCounter = 0;


    function showOrder(td) {
        // var orderId = td.dataset.orderId;
        if (lastSelectedTd != null) {
            $(lastSelectedTd).removeClass("highlight");
        }
        $(td).addClass("highlight");
        lastSelectedTd = td;
        var orderIdJson = { orderId: td.dataset.orderId };
        $.get("/staff/s22OrderDetails", orderIdJson).done(displayOrderDetails);

       // $.getJSON("/staff/s22OrderDetails", orderIdJson).done(displayOrderDetails);
    }

    function displayOrderDetails(orderDetailsHTML) {
        $("#s22OrderDetails").empty();
        $("#s22OrderDetails").append(orderDetailsHTML);
    }

    

    function addOrder(td) {
        cellClickCounter++;
        if (lastSelectedTd != null) {
            //remove highlighting from a previous booking that was selected
            $(lastSelectedTd).removeClass("highlight");
            lastSelectedTd = null;
        }
        if (cellClickCounter % 2 == 1) {
            //The user clicked odd number of times on a free cell - it means we need to collect apartment number and checkin date
            //We assume a one night stay
            if (lastSelectedLeft != null) {
                $(lastSelectedLeft).removeClass("selectedLeft");
            }
            if (lastSelectedRight != null) {
                $(lastSelectedRight).removeClass("selectedRight");
            }
            $(td).addClass("selectedLeft");
            lastSelectedLeft = td;
            apartmentNumber = td.dataset.apartmentId;
            checkinDate = new Date(td.dataset.date);
            nights = 1;
            var checkoutDate = nextDate(checkinDate);
            displayCheckinOutDates(apartmentNumber, checkinDate, checkoutDate, nights);
        }
        else {
            //The user clicked even number of times on a cell = collect the checkout date. Note that the user presses the 
            //last date - not the checkout date (which is one day later.)
            var secondApartmentNumber = td.dataset.apartmentId;
            if (apartmentNumber != secondApartmentNumber) {
                //The second click was for a different apartment number - start the process again. 
                //perform this by a recursive call to addOrder
                addOrder(td);
                return;
            }
            $(td).addClass("selectedRight");
            lastSelectedRight = td;
            lastDate = new Date(td.dataset.date);  
            checkoutDate = nextDate(lastDate);
            nights = diffDays(checkinDate, checkoutDate);
            if (nights <= 0) {
                //The second click was for a day before the first click - reverse the checkin and checkout dates
                //We do it by a recursive call to "addOrder"
                var leftTD = lastSelectedRight;
                var rightTD = lastSelectedLeft;
                addOrder(leftTD);
                addOrder(rightTD);
                return;
            }
            
            displayCheckinOutDates(apartmentNumber, checkinDate, checkoutDate, nights);
        }
    }
    //convert a Date object to dd/mm/yyyy
    function formatDateddmmyyyy(aDate) {
        var ddmmyyyy = aDate.getDate() + "/" + (aDate.getMonth() + 1) + "/" + aDate.getFullYear();
        return ddmmyyyy;
    }
    //convert a Date object to yyyy-mm-dd
    function formatDateyyyymmdd(aDate) {
        var yyyymmdd = aDate.getFullYear() + "-" + (aDate.getMonth() + 1) + "-" + aDate.getDate();
        return yyyymmdd;
    }
    //returns a date which is 1 day later
    function nextDate(aDate) {
        var nextDate = new Date(aDate);
        var nextDay = aDate.getDate() + 1;
        nextDate.setDate(nextDay);
        return nextDate;
    }

    function displayCheckinOutDates(apartmentNumber, checkinDate, checkoutDate, nights) {
        var html = '<div>' +
                '<span style="float:left">@tBox.translate("Apartment Number")</span>' +
                '<span id="apartmentNumber" style="float:right">' + apartmentNumber + '</span>' +
                '<br />' +
                '<span style="float:left">@tBox.translate("Checkin Date")</span>' +
                '<span id="checkinDate" style="float:right">' + formatDateddmmyyyy(checkinDate) + '</span>' +
                '<br />' +
                '<span style="float:left">@tBox.translate("Checkout Date")</span>' +
                '<span id="checkinDate" style="float:right">' + formatDateddmmyyyy(checkoutDate) + '</span>' +
                '<br />' +
                '<span style="float:left">@tBox.translate("nights")</span>' +
                '<span id="checkinDate" style="float:right">' + nights + '</span>' +
            '<br />' +
            '<a class="btn" href="/staff/s24addOrder?checkin=' + formatDateyyyymmdd(checkinDate) +
            '&checkout=' + formatDateyyyymmdd(checkoutDate) +
            '&nights=' + nights +
            '&apartmentNumber=' + apartmentNumber + '">@tBox.translate("Add Order") </a>' +
                '</div>';

            $("#s22OrderDetails").empty();
            $("#s22OrderDetails").append(html);
    }

    //returns the difference between d1 and d2 (actually d2 minus d1)
    function diffDays(d1, d2) {
        var ndays;
        var tv1 = d1.getTime();  // msec since 1970
        var tv2 = d2.getTime();

        ndays = (tv2 - tv1) / 1000 / 86400;
        ndays = Math.round(ndays - 0.5);
        return ndays;
    }
</script>